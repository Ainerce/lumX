#!/bin/bash

BOLD=""
UNDERLINE=""
STANDOUT=""
DEFAULT=""
BLACK=""
RED=""
GREEN=""
YELLOW=""
BLUE=""
MAGENTA=""
CYAN=""
WHITE=""

# Check if stdout is a terminal...
if [ -t 1 ]; then
    # See if it supports colors...
    ncolors=$(tput colors)

    if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
        BOLD="$(tput bold)"
        UNDERLINE="$(tput smul)"
        STANDOUT="$(tput smso)"
        DEFAULT="$(tput sgr0)"
        BLACK="$(tput setaf 0)"
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        BLUE="$(tput setaf 4)"
        MAGENTA="$(tput setaf 5)"
        CYAN="$(tput setaf 6)"
        WHITE="$(tput setaf 7)"
    fi
fi

PYLINT="flake8"
PYLINT_LOG="/tmp/pylint-result.log"

TSLINT="./node_modules/tslint/bin/tslint"
TSLINT_LOG="/tmp/tslint-result.log"

ESLINT="./node_modules/eslint/bin/eslint.js"
ESLINT_LOG="/tmp/eslint-result.log"

SASSLINT="./node_modules/sass-lint/bin/sass-lint.js"
SASSLINT_LOG="/tmp/sasslint-result.log"

exit_code=0

if type $PYLINT &> /dev/null; then
    printf "Checking ${BOLD}Python${DEFAULT} files with ${BLUE}Flake8${DEFAULT}......... "

    PYFILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".py$")
    if [ -n "$PYFILES" ]; then
        touch $PYLINT_LOG

        $(${PYLINT} --output-file=${PYLINT_LOG} ${PYFILES})

        if [ $? -eq 0 ]; then
            printf "${GREEN}✔ SUCCESS${DEFAULT}\n"
        else
            printf "${RED}❌ FAILED${DEFAULT}\n"
            printf "===== Flake8 logs =====\n"
            cat $PYLINT_LOG
            printf "\n"

            exit_code=1
        fi

        rm $PYLINT_LOG
    else
        printf "${CYAN}DONE${DEFAULT}\n"
    fi
fi


if [ -x $TSLINT ]; then
    printf "Checking ${BOLD}Typescript${DEFAULT} files with ${BLUE}TSLint${DEFAULT}..... "

    TSFILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".ts$")
    if [ -n "$TSFILES" ]; then
        touch $TSLINT_LOG

        $(${TSLINT} -t stylish --type-check --project ./tsconfig.json --config ./tslint.json ${TSFILES} &> ${TSLINT_LOG})
        cleanTSLintLog=$(cat $TSLINT_LOG | sed -r "s/\x1B\[(([0-9]+)(;[0-9]+)*)?[m,K,H,f,J]//g")

        TSLINT_FAILS=$(echo $cleanTSLintLog | grep -e "Error at ")
        TSLINT_FAILS="${TSLINT_FAILS}$(echo $cleanTSLintLog | grep -e 'ERROR: ')"
        if [ -n "$TSLINT_FAILS" ]; then
            printf "${RED}❌ FAILED${DEFAULT}\n"
            printf "===== TSLint logs =====\n"
            cat $TSLINT_LOG
            printf "\n"

            exit_code=1
        else
            TSLINT_WARNINGS=$(echo "$cleanTSLintLog" | grep -e "Warning: ")
            if [ -n "$TSLINT_WARNINGS" ]; then
                printf "${YELLOW}✔ SUCCESS (with warnings)${DEFAULT}\n"
                printf "===== TSLint logs =====\n"
                cat $TSLINT_LOG
                printf "\n"
            else
                printf "${GREEN}✔ SUCCESS${DEFAULT}\n"
            fi
        fi

        rm $TSLINT_LOG
    else
        printf "${CYAN}DONE${DEFAULT}\n"
    fi
fi

if [ -x $ESLINT ]; then
    printf "Checking ${BOLD}Javascript${DEFAULT} files with ${BLUE}ESLint${DEFAULT}..... "

    JSFILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".js$")
    if [ -n "$JSFILES" ]; then
        touch $ESLINT_LOG

        $(${ESLINT} -f "node_modules/eslint-friendly-formatter" -o ${ESLINT_LOG} ${JSFILES})
        cleanESLintLog=$(cat $ESLINT_LOG | sed -r "s/\x1B\[(([0-9]+)(;[0-9]+)*)?[m,K,H,f,J]//g")

        ESLINT_FAILS=$(echo "$cleanESLintLog" | grep -e "Errors:")
        if [ -n "$ESLINT_FAILS" ]; then
            printf "${RED}❌ FAILED${DEFAULT}\n"
            printf "===== ESLint logs ====="
            cat $ESLINT_LOG
            printf "\n"

            exit_code=1
        else
            ESLINT_WARNINGS=$(echo "$cleanESLintLog" | grep -e "Warnings:")
            if [ -n "$ESLINT_WARNINGS" ]; then
                printf "${YELLOW}✔ SUCCESS (with warnings)${DEFAULT}\n"
                printf "===== ESLint logs ====="
                cat $ESLINT_LOG
                printf "\n"
            else
                printf "${GREEN}✔ SUCCESS${DEFAULT}\n"
            fi
        fi

        rm $ESLINT_LOG
    else
        printf "${CYAN}DONE${DEFAULT}\n"
    fi
fi

if [ -x $SASSLINT ]; then
    printf "Checking ${BOLD}SASS${DEFAULT} files with ${BLUE}SASS-Lint${DEFAULT}........ "

    SASSFILES=$(git diff --cached --name-only --diff-filter=ACM | grep ".scss$")
    if [ -n "$SASSFILES" ]; then
        touch $SASSLINT_LOG

        $(${SASSLINT} -f stylish -q -v ${SASSFILES} > ${SASSLINT_LOG})
        cleanSASSLintLog=$(cat $SASSLINT_LOG | sed -r "s/\x1B\[(([0-9]+)(;[0-9]+)*)?[m,K,H,f,J]//g")

        SASSLINT_FAILS=$(echo "$cleanSASSLintLog" | grep -e "error ")
        if [ -n "$SASSLINT_FAILS" ]; then
            printf "${RED}❌ FAILED${DEFAULT}\n"
            printf "===== SASS-Lint logs =====\n"
            cat $SASSLINT_LOG
            printf "\n"

            exit_code=1
        else
            SASSLINT_WARNINGS=$(echo "$cleanSASSLintLog" | grep -e "warning ")
            if [ -n "$SASSLINT_WARNINGS" ]; then
                printf "${YELLOW}✔ SUCCESS (with warnings)${DEFAULT}\n"
                printf "===== SASS-Lint logs ====="
                cat $SASSLINT_LOG
                printf "\n"
            else
                printf "${GREEN}✔ SUCCESS${DEFAULT}\n"
            fi
        fi

        rm $SASSLINT_LOG
    else
        printf "${CYAN}DONE${DEFAULT}\n"
    fi
fi

printf "\n"

if [[ $exit_code -eq 0 ]]; then
    printf "${GREEN}✔ Pre-commit successful, you are allowed to commit${DEFAULT}"
else
    printf "${RED}❌ Pre-commit failed, you cannot commit${DEFAULT}"
fi

printf "\n"

exit $exit_code
